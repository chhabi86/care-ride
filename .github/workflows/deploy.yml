name: Frontend Deploy with SSH Retry

o          # SSH retry function for commands
          ssh_retry() {
            local cmd="$1"
            local max_attempts=5
            local delay=10
            
            for i in $(seq 1 $max_attempts); do
              echo "üîÑ SSH attempt $i/$max_attempts..."
              
              if timeout 60 ssh -o ConnectTimeout=30 \
                               -o ServerAliveInterval=10 \
                               -o ServerAliveCountMax=3 \
                               -o StrictHostKeyChecking=no \
                               -o BatchMode=yes \
                               -i /tmp/deploy_key \
                               ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
                               "$cmd"; thenanches: [ main ]
  workflow_dispatch: {}

jobs:
  build-and-deploy:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout frontend code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless
        continue-on-error: true

      - name: Build production frontend
        run: npm run build --prod

      - name: Setup SSH with retry logic
        run: |
          # Setup SSH key
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key
          
          # Create SSH retry function
          ssh_retry() {
            local cmd="$1"
            local max_attempts=5
            local delay=10
            
            for i in $(seq 1 $max_attempts); do
              echo "üîÑ SSH attempt $i/$max_attempts..."
              
              if timeout 60 ssh -o ConnectTimeout=30 \
                               -o ServerAliveInterval=10 \
                               -o ServerAliveCountMax=3 \
                               -o StrictHostKeyChecking=no \
                               -o BatchMode=yes \
                               -i /tmp/deploy_key \
                               ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
                               "$cmd"; then
                echo "‚úÖ SSH command succeeded on attempt $i"
                return 0
              else
                echo "‚ùå SSH attempt $i failed"
                if [ $i -lt $max_attempts ]; then
                  echo "‚è≥ Waiting ${delay}s before retry..."
                  sleep $delay
                  delay=$((delay * 2))  # Exponential backoff
                fi
              fi
            done
            
            echo "üí• All SSH attempts failed"
            return 1
          }
          
          # Export function for later steps
          echo 'ssh_retry() {
            local cmd="$1"
            local max_attempts=5
            local delay=10
            
            for i in $(seq 1 $max_attempts); do
              echo "üîÑ SSH attempt $i/$max_attempts..."
              
              if timeout 60 ssh -o ConnectTimeout=30 \
                               -o ServerAliveInterval=10 \
                               -o ServerAliveCountMax=3 \
                               -o StrictHostKeyChecking=no \
                               -o BatchMode=yes \
                               -i /tmp/deploy_key \
                               ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
                               "$cmd"; then
                echo "‚úÖ SSH command succeeded on attempt $i"
                return 0
              else
                echo "‚ùå SSH attempt $i failed"
                if [ $i -lt $max_attempts ]; then
                  echo "‚è≥ Waiting ${delay}s before retry..."
                  sleep $delay
                  delay=$((delay * 2))
                fi
              fi
            done
            
            echo "üí• All SSH attempts failed"
            return 1
          }' > /tmp/ssh_retry.sh
          chmod +x /tmp/ssh_retry.sh

      - name: Test server connectivity
        run: |
          source /tmp/ssh_retry.sh
          echo "üîç Testing server connectivity..."
          ssh_retry "echo 'Server connectivity test successful' && uptime"

      - name: Deploy frontend to server
        run: |
          source /tmp/ssh_retry.sh
          
          echo "üöÄ Starting frontend deployment..."
          
          # Create frontend directory and backup
          ssh_retry "
            set -e
            echo 'üìÅ Preparing frontend directories...'
            sudo mkdir -p /var/www/care-ride-frontend
            sudo mkdir -p /tmp/frontend-build
            
            # Backup current frontend
            if [ -d /var/www/care-ride-frontend ] && [ '$(ls -A /var/www/care-ride-frontend)' ]; then
              echo 'üíæ Backing up current frontend...'
              sudo cp -r /var/www/care-ride-frontend /var/www/care-ride-frontend.backup.\$(date +%Y%m%d-%H%M%S) || true
            fi
            
            # Clean build directory
            sudo rm -rf /tmp/frontend-build/*
            
            echo '‚úÖ Frontend directories prepared'
          "

      - name: Upload frontend files with retry
        run: |
          # SCP retry function
          scp_retry() {
            local src="$1"
            local dest="$2"
            local max_attempts=5
            local delay=10
            
            for i in $(seq 1 $max_attempts); do
              echo "ÔøΩÔøΩ SCP attempt $i/$max_attempts..."
              
              if timeout 300 scp -o ConnectTimeout=30 \
                                 -o ServerAliveInterval=10 \
                                 -o ServerAliveCountMax=3 \
                                 -o StrictHostKeyChecking=no \
                                 -o BatchMode=yes \
                                 -i /tmp/deploy_key \
                                 -r "$src" "$dest"; then
                echo "‚úÖ File upload succeeded on attempt $i"
                return 0
              else
                echo "‚ùå SCP attempt $i failed"
                if [ $i -lt $max_attempts ]; then
                  echo "‚è≥ Waiting ${delay}s before retry..."
                  sleep $delay
                  delay=$((delay * 2))
                fi
              fi
            done
            
            echo "üí• All SCP attempts failed"
            return 1
          }
          
          echo "üì§ Uploading frontend files..."
          scp_retry "dist/care-ride-frontend/*" "${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/frontend-build/"

      - name: Finalize frontend deployment
        run: |
          source /tmp/ssh_retry.sh
          
          echo "üîß Finalizing frontend deployment..."
          
          ssh_retry "
            set -e
            
            # Stop nginx temporarily
            echo '‚è∏Ô∏è  Stopping nginx...'
            sudo systemctl stop nginx || true
            
            # Move files to web directory
            echo 'üìÅ Moving files to web directory...'
            sudo rm -rf /var/www/care-ride-frontend/*
            sudo mv /tmp/frontend-build/* /var/www/care-ride-frontend/
            
            # Set proper permissions
            echo 'üîê Setting permissions...'
            sudo chown -R www-data:www-data /var/www/care-ride-frontend
            sudo chmod -R 755 /var/www/care-ride-frontend
            
            # Start nginx
            echo '‚ñ∂Ô∏è  Starting nginx...'
            sudo systemctl start nginx
            sudo systemctl enable nginx
            
            echo '‚úÖ Frontend deployment completed successfully'
          "

      - name: Verify deployment
        run: |
          echo "üîç Verifying frontend deployment..."
          sleep 15
          
          for i in {1..5}; do
            if curl -f --connect-timeout 10 --max-time 30 "http://${{ secrets.DEPLOY_HOST }}" > /dev/null 2>&1; then
              echo "‚úÖ Frontend is responding correctly"
              exit 0
            else
              echo "‚è≥ Attempt $i/5: Frontend not ready yet, waiting..."
              sleep 10
            fi
          done
          
          echo "‚ùå Frontend verification failed"
          exit 1

      - name: Cleanup
        if: always()
        run: |
          rm -f /tmp/deploy_key /tmp/ssh_retry.sh
