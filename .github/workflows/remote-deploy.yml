name: Remote Deploy to Ubuntu Server

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

jobs:
  remote-deploy:
    name: Remote deploy (SSH)
    runs-on: ubuntu-latest
    steps:
      - name: Prepare SSH key
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.DEPLOY_SSH_KEY_B64 }}" ]; then
            echo "Decoding base64 SSH key"
            echo "${{ secrets.DEPLOY_SSH_KEY_B64 }}" | base64 -d > /tmp/deploy_key || { echo "Base64 decode failed" >&2; exit 1; }
          else
            printf "%s" "${{ secrets.DEPLOY_SSH_KEY }}" > /tmp/deploy_key
          fi
          # Convert literal \n sequences to real newlines if present (some users paste escaped form)
          if grep -q '\\n' /tmp/deploy_key; then
            sed -e 's/\\n/\n/g' /tmp/deploy_key > /tmp/deploy_key.tmp && mv /tmp/deploy_key.tmp /tmp/deploy_key
          fi
          # Strip CR in case of Windows line endings
          sed -i 's/\r$//' /tmp/deploy_key || true
          chmod 600 /tmp/deploy_key
          head -n1 /tmp/deploy_key | grep -q 'BEGIN OPENSSH PRIVATE KEY' || echo "WARNING: Key header not detected (ensure correct private key format)" >&2
          ssh-keygen -lf /tmp/deploy_key || echo "(Fingerprint unavailable)"

      - name: Run remote deploy script over SSH (manual)
        shell: bash
        run: |
          set -euo pipefail
          echo "Connecting to ${{ secrets.DEPLOY_HOST }} as ${{ secrets.DEPLOY_USER }}"
          ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key -p "${{ secrets.DEPLOY_SSH_PORT }}" "${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}" <<'REMOTE'
            set -euo pipefail
            echo "Running remote deploy on ${HOSTNAME:-remote}"
            # Ensure /opt exists and is writable by the deploy user
            if [ ! -d /opt ]; then
              sudo mkdir -p /opt
              sudo chown $USER: /opt || true
            fi

            if [ ! -d /opt/care-ride-site-chhabi ]; then
              echo "Cloning repository into /opt/care-ride-site-chhabi"
              sudo git clone https://github.com/chhabi86/care-ride-site-chhabi.git /opt/care-ride-site-chhabi
              sudo chown -R $USER: /opt/care-ride-site-chhabi || true
            else
              echo "Updating repository in /opt/care-ride-site-chhabi"
              cd /opt/care-ride-site-chhabi || exit 1
              if [ -f .git/index.lock ]; then
                echo "Stale git index.lock detected, removing." >&2
                sudo rm -f .git/index.lock || true
              fi
              sudo git fetch origin main --prune || true
              sudo git reset --hard origin/main || true
            fi

            cd /opt/care-ride-site-chhabi || exit 1
            sudo chmod +x ./deploy.sh || true
            echo "Starting deploy.sh (may take several minutes)"
            # Export DOMAIN for non-interactive deploys (set DEPLOY_DOMAIN in repo secrets)
            if [ -n "${{ secrets.DEPLOY_DOMAIN }}" ]; then
              echo "Exporting DEPLOY_DOMAIN"
              export DOMAIN="${{ secrets.DEPLOY_DOMAIN }}"
            fi
            sudo ./deploy.sh
          REMOTE
