name: Remote Deploy to Ubuntu Server

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

jobs:
  remote-deploy:
    name: Remote deploy (SSH)
    runs-on: ubuntu-latest
    steps:
      - name: Prepare SSH key
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.DEPLOY_SSH_KEY_B64 }}" ]; then
            echo "Decoding base64 SSH key"
            echo "${{ secrets.DEPLOY_SSH_KEY_B64 }}" | base64 -d > /tmp/deploy_key || { echo "Base64 decode failed" >&2; exit 1; }
          else
            printf "%s" "${{ secrets.DEPLOY_SSH_KEY }}" > /tmp/deploy_key
          fi
          # Convert literal \n sequences to real newlines if present (some users paste escaped form)
          if grep -q '\\n' /tmp/deploy_key; then
            sed -e 's/\\n/\n/g' /tmp/deploy_key > /tmp/deploy_key.tmp && mv /tmp/deploy_key.tmp /tmp/deploy_key
          fi
          # Strip CR in case of Windows line endings
          sed -i 's/\r$//' /tmp/deploy_key || true
          chmod 600 /tmp/deploy_key
          head -n1 /tmp/deploy_key | grep -q 'BEGIN OPENSSH PRIVATE KEY' || echo "WARNING: Key header not detected (ensure correct private key format)" >&2
          ssh-keygen -lf /tmp/deploy_key || echo "(Fingerprint unavailable)"

      - name: Run remote deploy script over SSH (manual)
        shell: bash
        env:
          DEPLOY_DOMAIN: ${{ secrets.DEPLOY_DOMAIN }}
        run: |
          set -euo pipefail
          if [ -z "${DEPLOY_DOMAIN:-}" ]; then
            echo "ERROR: DEPLOY_DOMAIN secret is not set; add it in repository Settings -> Secrets and retry." >&2
            exit 1
          fi
          echo "Connecting to ${{ secrets.DEPLOY_HOST }} as ${{ secrets.DEPLOY_USER }}"
          ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key -p "${{ secrets.DEPLOY_SSH_PORT }}" "${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}" <<REMOTE
            set -eo pipefail
            DOMAIN_VALUE="${DEPLOY_DOMAIN}"
            if [ -z "${DOMAIN_VALUE}" ]; then
              echo "ERROR: DOMAIN not provided to remote script" >&2
              exit 1
            fi
            echo "Running remote deploy on \\${HOSTNAME:-remote} with DOMAIN=\\${DOMAIN_VALUE}"
            # Ensure /opt exists and is writable by the deploy user
            if [ ! -d /opt ]; then
              sudo mkdir -p /opt
              sudo chown $USER: /opt || true
            fi

            REPO_DIR=/opt/care-ride
            if [ ! -d "${REPO_DIR}" ]; then
              echo "Cloning repository into \\${REPO_DIR}"
              sudo git clone https://github.com/chhabi86/care-ride.git "${REPO_DIR}"
              sudo chown -R $USER: "${REPO_DIR}" || true
            else
              echo "Updating repository in \\${REPO_DIR}"
              cd "${REPO_DIR}" || exit 1
              if [ -f .git/index.lock ]; then
                echo "Stale git index.lock detected, removing." >&2
                sudo rm -f .git/index.lock || true
              fi
              sudo git fetch origin main --prune || true
              sudo git reset --hard origin/main || true
            fi

            cd "${REPO_DIR}" || exit 1
            sudo chmod +x ./deploy.sh backend/deploy.sh || true
            echo "Starting deploy.sh (may take several minutes)"
            # Pass DOMAIN explicitly through sudo so it isn't stripped.
            if [ -x backend/deploy.sh ]; then
              sudo DOMAIN="${DOMAIN_VALUE}" backend/deploy.sh
            else
              sudo DOMAIN="${DOMAIN_VALUE}" ./deploy.sh
            fi
          REMOTE
