name: Remote Deploy to Ubuntu Server

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

jobs:
  remote-deploy:
    name: Remote deploy (SSH)
    runs-on: ubuntu-latest
    steps:
      - name: Prepare SSH key
        shell: bash
        run: |
          set -eo pipefail
          echo "Setting up SSH key for deployment..."
          
          # Use regular SSH key (more reliable than base64)
          echo "Using regular SSH key from DEPLOY_SSH_KEY"
          printf "%s\n" "${{ secrets.DEPLOY_SSH_KEY }}" > /tmp/deploy_key
          
          # Convert literal \n sequences to real newlines if present
          if grep -q '\\n' /tmp/deploy_key; then
            echo "Converting literal \\n sequences to newlines"
            sed -e 's/\\n/\n/g' /tmp/deploy_key > /tmp/deploy_key.tmp && mv /tmp/deploy_key.tmp /tmp/deploy_key
          fi
          
          # Strip CR in case of Windows line endings
          sed -i 's/\r$//' /tmp/deploy_key || true
          
          # Ensure proper permissions
          chmod 600 /tmp/deploy_key
          
          # Validate key format
          echo "Validating SSH key format..."
          if head -n1 /tmp/deploy_key | grep -q 'BEGIN OPENSSH PRIVATE KEY'; then
            echo "✅ SSH key format validated"
          else
            echo "⚠️  SSH key format warning - checking if usable"
          fi
          
          # Test key readability
          if ssh-keygen -lf /tmp/deploy_key >/dev/null 2>&1; then
            echo "✅ SSH key is readable"
            ssh-keygen -lf /tmp/deploy_key
          else
            echo "❌ SSH key validation failed"
            echo "Key content preview (first 50 chars):"
            head -c 50 /tmp/deploy_key
            exit 1
          fi

      - name: Run remote deploy script over SSH (manual)
        shell: bash
        env:
          DEPLOY_DOMAIN: ${{ secrets.DEPLOY_DOMAIN }}
        run: |
          set -eo pipefail
          if [ -z "${DEPLOY_DOMAIN:-}" ]; then
            echo "ERROR: DEPLOY_DOMAIN secret is not set; add it in repository Settings -> Secrets and retry." >&2
            exit 1
          fi
          echo "Connecting to ${{ secrets.DEPLOY_HOST }} as ${{ secrets.DEPLOY_USER }}"
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10 -o ConnectTimeout=30 -i /tmp/deploy_key -p "${{ secrets.DEPLOY_SSH_PORT }}" "${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}" "DOMAIN=${DEPLOY_DOMAIN} bash -s" <<'REMOTE'
            set -eo pipefail
            if [ -z "$DOMAIN" ]; then
              echo "ERROR: DOMAIN environment variable not received on remote" >&2
              exit 1
            fi
            echo "Running remote deploy on ${HOSTNAME:-remote} with DOMAIN=${DOMAIN}"
            # Ensure /opt exists and is writable by the deploy user
            if [ ! -d /opt ]; then
              sudo mkdir -p /opt
              sudo chown $USER: /opt || true
            fi

            REPO_DIR=/opt/care-ride
            if [ ! -d "${REPO_DIR}" ]; then
              echo "Cloning repository into \\${REPO_DIR}"
              sudo git clone https://github.com/chhabi86/care-ride.git "${REPO_DIR}"
              sudo chown -R $USER: "${REPO_DIR}" || true
            else
              echo "Updating repository in \\${REPO_DIR}"
              cd "${REPO_DIR}" || exit 1
              if [ -f .git/index.lock ]; then
                echo "Stale git index.lock detected, removing." >&2
                sudo rm -f .git/index.lock || true
              fi
              sudo git fetch origin main --prune || true
              sudo git reset --hard origin/main || true
            fi

            cd "${REPO_DIR}" || exit 1
            sudo chmod +x ./deploy.sh backend/deploy.sh || true
            echo "Starting deploy.sh in background (to prevent SSH timeouts)"
            # Create a deployment log file
            DEPLOY_LOG="/tmp/care-ride-deploy-$(date +%Y%m%d-%H%M%S).log"
            echo "Deployment log: $DEPLOY_LOG"
            
            # Pass DOMAIN explicitly through sudo and run in background
            if [ -x backend/deploy.sh ]; then
              nohup sudo DOMAIN="$DOMAIN" backend/deploy.sh > "$DEPLOY_LOG" 2>&1 &
              DEPLOY_PID=$!
              echo "Deploy script started with PID: $DEPLOY_PID"
              echo "Waiting for initial deployment steps to complete..."
              
              # Wait a bit for initial setup, then check progress
              sleep 30
              if ps -p $DEPLOY_PID > /dev/null; then
                echo "✅ Deployment is running successfully"
                echo "📋 Recent deployment progress:"
                tail -20 "$DEPLOY_LOG" || echo "Log not yet available"
                echo ""
                echo "🚀 Deployment will continue in background on server"
                echo "🔍 Monitor progress: sudo tail -f $DEPLOY_LOG"
                echo "✅ GitHub Actions deployment completed - server deployment continuing"
              else
                echo "❌ Deployment process failed"
                echo "📋 Deployment log:"
                cat "$DEPLOY_LOG" 2>/dev/null || echo "No log available"
                exit 1
              fi
            else
              sudo DOMAIN="$DOMAIN" ./deploy.sh
            fi
          REMOTE
